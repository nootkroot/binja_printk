# This file handles actually building the plugin and publishing artifacts.
# It does not create a GitHub release; that's done by the caller.
name: Cross-Platform Build

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
        description: What should we call your library?
      binaryninja_api_path:
        required: false
        default: "vendor/api"
        type: string
        description: location of binaryninja-api checkout
      artifact_prefix:
        required: false
        default: "built"
        type: string
        description: >-
          prefix to apply to uploaded artifacts, to disambiguate from other test
          runs

# Note if you build Debug, you'll be using the debug C runtime on Windows and
# will likely crash on load due to incompatibility with Binary Ninja using the
# normal, release C runtime.
env:
  BUILD_TYPE: Release

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            cmake_backend: "Unix Makefiles"
            # We use this "glob" to find the built binary and upload it. Right
            # now it's just a plain path, but doesn't have to be.
            # Additionally for Windows we have a separate step hardcoded below
            # to upload the PDB, that seemed cleanest.
            binary_glob: "lib${{ inputs.project_name }}.so"

          - os: macos-latest
            cmake_backend: "Unix Makefiles"
            binary_glob: "lib${{ inputs.project_name }}.dylib"

          - os: windows-latest
            # I couldn't find a way to multithread a msbuild build, so I
            # switched to Ninja.
            cmake_backend: "Ninja"
            binary_glob: "${{ inputs.project_name }}.dll"


    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'

    # Needed so we can use Ninja and actually parallelize build
    - name: Set up Visual Studio shell
      if: ${{ matrix.os == 'windows-latest' }}
      uses: egor-tensin/vs-shell@v2
      with:
        arch: x64

    # The only thing about the CI build that's weird here is that we've enabled
    # the FAKE_BN_CORE option.
    - name: Configure CMake
      run: cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBNAPI_DIR=${{ inputs.binaryninja_api_path }} -DFAKE_BN_CORE=ON -S ${{github.workspace}} -B ${{github.workspace}}/build "-G${{ matrix.cmake_backend }}"

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact_prefix }}-${{runner.os}}
        path: ${{github.workspace}}/build/${{matrix.binary_glob}}

    - name: Upload Artifact (PDB)
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact_prefix }}-${{runner.os}}
        path: ${{github.workspace}}/build/${{ inputs.project_name }}.pdb
      if: ${{ matrix.os == 'windows-latest' }}
