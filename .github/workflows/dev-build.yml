# This file handles building every push to master (or my super secret test
# branch)
# We overwrite the same GitHub release with new binaries every time. Maybe
# suboptimal but it works.
#
# You should tag an actual release when you're ready (see tag-build.yml for how
# it'll get built :) )
name: Dev Build
on:
  push:
    branches: [ master, actions-test ]

jobs:
  build-dev:
    uses: ./.github/workflows/cross-platform-build.yml
    name: Build against Binary Ninja Dev
    with:
      # Should match project(name_here) from CMakeLists.txt
      project_name: binja_printk
      artifact_prefix: dev
      binaryninja_api_path: vendor/api

  build-stable:
    uses: ./.github/workflows/cross-platform-build.yml
    name: Build against Binary Ninja Stable
    with:
      # Should match project(name_here) from CMakeLists.txt
      project_name: binja_printk
      artifact_prefix: stable
      binaryninja_api_path: vendor/api-stable

  make-release:
    needs: [ build-dev, build-stable ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # We checkout the whole repo so that git describe works. There's
          # probably a more performant way, but most plugins are small so this
          # should be fine.
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Check files present
        run: |-
          cd artifacts
          ls -Fhl
          find .
      - name: Consolidate and rename files for release
        run: |-
          cd artifacts
          ${{github.workspace}}/scripts/tidy_release.bash dev stable
      - name: Make a Git tag
        run: |-
          git tag -f automated-build
          git push --tags -f
      - name: Release
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        working-directory: "${{github.workspace}}/artifacts"
        run: |-
          ${{github.workspace}}/scripts/do_release.py --title "Automated Build" --tag "automated-build" --artifacts release --prerelease --overwrite
